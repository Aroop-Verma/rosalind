

s = "GGGGCTGTCTATGGCATGTCTATTATGTCTATTGTGTCTATGTGTCTATGTGTCTATGACTGTCTATATGTCTATTGTCTATGTCTGTCTATTGTGTCTATTGTCTATACCCCTAGTGTCTATATGTCTATACCTGTCTATTTGATCTGTCTATAAGTTGTCTATCAGATGTCTATATGTCTATTCATTGTCTATTGTCTATCATGTCTATACGAGAGTGTCTATTTGTCTATCTGTCTATGTGTCTATGATGGTCACGTGTCTATTGTCTATTGTCTATTGTCTATCATGTCTATTGCATTGTCTATTGTCTATTGTCTATTTACGCCTGTCTATTGTCTATACACCATGTCTATTGTCTATTGTCTATGACTGTCTATCTGTCTATTGTCTATTGTCTATTGTCTATAGACATGTCTATTGTCTATTTGTCTATTGTCTATAAAATTCCCCTGGACTGTCTATTGTCTATGTGTCTATTGTCTATGTGTCTATACCAGGTGTCTATATATGTCTATGTGTCTATCGCGCGTGTGTCTATTTTGTCTATGAGGTATCTGTCTATTTGTCTATTATGTCTATTGTCTATTGTCTATCTGTCTATTATTGTCTATCTGTCTATTGTCTATTTATGTCTATTAGGTGTCTATTTTGCGGCTGTCTATACTGTCTATTTGTCTATAGTGTCTATTGTCTATGTTGTCTATTAGCAGTTGTCTATGTGTCTATGTGTCTATACTGTCGCTGTCTATCTGTCTATTTGTCTATATGTCTATCCCCTGTCTATTGTTGTCTATTGTCTATTGTCTATCGAGTGTCTATTAGGGGTAGTTGTCTATAGCTGTGTCTATTTATGTCTATCAATGCCTGATGTCTATTTGTCTATCTGTCTATAGTCTAGCTTCACCCTGTCTATGATGTCTAT"
t = "TGTCTATTG"


def find_motif(sequence, motif):

    sequence_len = len(sequence)
    sequence_index = 0
    index_shift = len(motif)
    motif_start_location = []
    
    while sequence_index <= sequence_len:
        sub_sequence = sequence[sequence_index : sequence_index + index_shift]
        if motif == sub_sequence:
            motif_location = sequence_index + 1
            motif_start_location.append(motif_location)
        sequence_index += 1

    return motif_start_location

output = find_motif(s, t)
print(output)
